###########################################################################
# Change prefix from default (C-b) to C-a
set -g prefix C-a

###########################################################################
# General options

# Ring the bell if any background window rang a bell
set -g bell-action any

# Watch for activity in background windows
setw -g monitor-activity on

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
set -g xterm-keys on

###########################################################################
# General keymap

# Keep your finger on ctrl, or don't, same result
bind-key C-d detach-client
bind-key C-c new-window
bind-key C-p paste-buffer

# Redraw the client (if interrupted by wall, etc)
bind r refresh-client

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

###########################################################################
# Window management / navigation

# Screen like binding for last window
unbind l
bind C-a last-window

# C-Space (no prefix) to tab to next window
bind -n C-Space next-window

###########################################################################
# Pane management / navigation

# Create splits and vertical splits
bind-key v split-window -h -c "#{pane_current_path}"
bind-key ^V split-window -h -c "#{pane_current_path}"
bind-key s split-window -c "#{pane_current_path}"
bind-key ^S split-window -c "#{pane_current_path}"

# New window with default path set to last path
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# C-a C-k to passthrough a C-k
# C-k is consumed for pane navigation but we want it for kill-to-eol
unbind C-k
bind C-k send-key C-k

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind-key H resize-pane -L
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key L resize-pane -R

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# fix session chooser
bind e choose-session

###########################################################################
# Scrollback / pastebuffer

# start selecting text typing 'v' key (once you are in copy mode)
bind -t vi-copy v begin-selection

# cancel selection with Escape
#bind -t vi-copy Escape cancel

###########################################################################
# Mouse mode

set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

# Toggle mouse on with ^B m
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^B M
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'

###########################################################################
# Color scheme

set -g status-fg colour231
set -g status-bg colour234

###########################################################################
# Status Bar

set -g status on
set -g status-position top
set -g status-interval 2
set -g status-left-length 20
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]'
set -g status-right-length 150
set -g status-right 'CPU: #{cpu_icon} #{cpu_percentage} | Batt: #{battery_icon} #{battery_percentage} #{battery_remain}| Online: #{online_status} | %a %h %e %l:%M %p'
set -g window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[fg=colour249]#W "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"

###########################################################################
# tmux-resurrect plugin

# for vim
set -g @resurrect-strategy-vim 'session'

# for neovim
set -g @resurrect-strategy-nvim 'session'

# restore pane contents
#set -g @resurrect-capture-pane-contents 'on'

###########################################################################
# tmux-continuum plugin

set -g @continuum-restore 'on'

###########################################################################
# tmux-sidebar plugin

set -g @sidebar-tree-command 'tree -C'

###########################################################################
# TMUX plugin manager

# List of plugins
set -g @tpm_plugins '              \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-urlview        \
  tmux-plugins/tmux-battery        \
  tmux-plugins/tmux-cpu            \
  tmux-plugins/tmux-yank           \
  tmux-plugins/tmux-copycat        \
  tmux-plugins/tmux-fpp            \
  tmux-plugins/tmux-continuum      \
  tmux-plugins/tmux-sessionist     \
  tmux-plugins/tmux-logging        \
  tmux-plugins/tmux-online-status  \
  tmux-plugins/tmux-sidebar        \
  tmux-plugins/tmux-open           \
'
  #tmux-plugins/tmux-resurrect      \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'

###########################################################################
