" basics {
  set nocompatible " must be the first line
" }

" functions {

  let s:cache_dir = "~/.vim/.cache/"

  function! s:get_cache_dir(suffix)  " {{{
    return resolve(expand(s:cache_dir . "/" . a:suffix))
  endfunction
  " }}}

  function! s:ensure_exists(path) "{{{
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path))
    endif
  endfunction "}}}

  function! CursorPing()  " {{{
    set cursorcolumn
    set cursorline
    redraw
    sleep 200m
    set nocursorcolumn
    set nocursorline
  endfunction
  " }}}

  function! Preserve(command) "{{{
    " preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction "}}}

  function! StripTrailingWhitespace() "{{{
    if exists('b:stripWhitespace')
      call Preserve("%s/\\s\\+$//e")
    endif
  endfunction "}}}

  " for tmux to automatically set paste and nopaste mode at the time pasting (as
  " happens in VIM UI)

  function! s:wrap_for_tmux(s)
    if !exists('$TMUX')
      return a:s
    endif

    let tmux_start = "\<Esc>Ptmux;"
    let tmux_end = "\<Esc>\\"

    return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
  endfunction

  function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
  endfunction

" }

" neobundle {
  if filereadable(expand("~/.vim/neobundles.vim"))
    source ~/.vim/neobundles.vim
  endif
" }

" general {
  syntax on
  set mouse=a              " enable mouse usage (all modes)
  set mousehide

  if has("macunix")
    set clipboard=unnamed  " sync with OS clipboard
  endif

  set history=1000         " store lots of :cmdline history
  set nospell
  set hidden               " hide buffers when they are abandoned
  set exrc                 " enable per-directory .vimrc files
  set secure               " disable unsafe commands in local .vimrc files
  set autoread             " reload files changed outside vim
  set nrformats-=octal     " always assume decimal numbers
  set ttyfast              " assume fast terminal connection
  set encoding=utf-8       " set encoding for text
" }

" gnome-terminal colors {
  if &term =~ '^\(xterm\|screen\)$' && $COLORTERM == 'gnome-terminal'
    set t_Co=256
  endif
" }

" vim file/folder management {

  call s:ensure_exists(s:cache_dir)

  " persistent undo
  if has("persistent_undo")
    set undofile
    let &undodir=s:get_cache_dir("undo")
    call s:ensure_exists(&undodir)
  endif

  " backups
  set backup
  let &backupdir=s:get_cache_dir("backup")
  call s:ensure_exists(&backupdir)

  " swap files
  let &directory=s:get_cache_dir("swap")
  call s:ensure_exists(&directory)

" }

" vim-airline {
  let g:airline_theme = "hybrid"
  let g:airline_powerline_fonts=1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#fnamemod = ":t"
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#buffer_nr_format = "%s "
" }

" vim ui {
  let g:solarized_termcolors=256
  let g:solarized_termtrans=1
  let g:solarized_contrast="normal"
  let g:solarized_visibility="normal"
  let g:kolor_underlined=1
  let g:hybrid_use_iTerm_colors = 1
  let g:hybrid_use_Xresources = 1
  set background=dark
  colorscheme hybrid               " load a colorscheme

  set laststatus=2                 " always show the statusline for airline
  set ruler
  set title
  set novisualbell                 " no sounds
  set t_vb=
  set showcmd                      " show incomplete cmds down the bottom
  set noshowmode                   " no need to show mode with airline
  set completeopt=longest,menuone  " auto complete setting

  highlight clear SignColumn       " signcolumn should match background
  " highlight clear LineNr           " current line number row will have same background color in relative mode

  set backspace=indent,eol,start  " allow backspace in insert mode
  set number                      " line numbers are good
  set showmatch                   " show matching brackets
  set matchtime=2                 " tens of a second to show matching parentheses
  set incsearch                   " incremental search
  set hlsearch
  set winminheight=0
  set ignorecase                  " case insensitive matching
  set smartcase                   " smart case matching

  set wildmenu                    " show list for autocomplete
  set wildmode=list:longest,full

  if v:version > 703 || (v:version == 704 && has('patch72'))
    set wildignorecase
  endif

  " stuff to ignore when tab completing
  set wildignore+=
        \*.o,
        \*.obj,
        \*~,
        \log/**,
        \tmp/**,
        \*.png,
        \*.jpg,
        \*.gif,
        \*.so,
        \*.swp,
        \*.zip,
        \*.pdf,
        \*/.Trash/**,
        \*/.git/**,
        \*/.hg/**,
        \*/.svn/**,
        \*/.idea/**,
        \*/.DS_Store

  set winheight=50                " sensible heights for splits
  set scrolloff=8                 " start scrolling when we're 8 lines away from margins
  set sidescrolloff=15
  set sidescroll=1
  set scrolljump=3
  set numberwidth=1
  " set foldenable
  " set foldmethod=syntax
  " set foldlevelstart=99
  set list
  "set listchars=eol:$,tab:>-,trail:-
  if has("gui_running")
    set listchars=tab:›\ ,trail:•,extends:❯,precedes:❮,nbsp:.
  else
    set listchars=tab:\ \ ,trail:•,extends:❯,precedes:❮,nbsp:.
  endif
  let &showbreak="↪ "

  set updatetime=1000

  if executable("ag")
    set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
    set grepformat=%f:%l:%c:%m
  endif
" }

" formatting {
  set formatoptions=croqlt

  if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j " Delete comment character when joining commented lines
  endif

  set linebreak              " wrap lines at convenient points
  set textwidth=80
  set nowrap                 " don't wrap lines
  set whichwrap+=<,>,[,]
  set autoindent
  set shiftwidth=2
  set expandtab
  set tabstop=2
  set softtabstop=2
  set shiftround
  set nojoinspaces
  set splitright
  set splitbelow
  set smartindent
  set smarttab
  set nocopyindent

  if has("conceal")
    set conceallevel=1
    set listchars+=conceal:Δ
  endif
" }

" autocmd {
  " go back to previous position of cursor if any
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \  exe 'normal! g`"zvzz' |
    \ endif

  autocmd BufNewFile,BufRead *.ts set filetype=typescript
  autocmd BufNewFile,BufRead *.es6 set filetype=javascript
  autocmd BufWritePre * call StripTrailingWhitespace()
  autocmd FileType javascript,typescript,json,scss,css let b:stripWhitespace = 1
  " autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}
  autocmd FileType css,scss nnoremap <silent> <leader>S vi{:sort<cr>
  " autocmd FileType python setlocal foldmethod=indent
  " autocmd FileType vim setlocal foldmethod=indent keywordprg=:help
  autocmd FileType vim setlocal keywordprg=:help
  autocmd FileType javascript,typescript,markdown,python,go setlocal shiftwidth=4 tabstop=4 softtabstop=4

  if v:version >= 703
    autocmd FileType markdown setlocal colorcolumn=81
  endif

  autocmd FileType go setlocal noexpandtab
  autocmd FileType go let g:syntastic_aggregate_errors = 1
  autocmd FileType go let g:syntastic_go_checkers = ["go", "govet", "golint"]
  autocmd FileType typescript let g:syntastic_typescript_checkers = ["tsc", "tslint"]

  augroup HiglightTODO
    " ensure any instance TODO or FIXME is highlighted as an Error in any filetype
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Error', 'TODO', -1)
    autocmd WinEnter,VimEnter * :silent! call matchadd('Error', 'FIXME', -1)
  augroup END
" }

" key (re)mappings {

  " function key mappings {
      nmap     <f1> [unite]h
      " nnoremap <expr><f2> g:MyOpenExplorerCommand()
      nnoremap <f3> :Startify<cr>
      nnoremap <f4> :UniteSessionSave
      nmap     <f5> <plug>ToggleGoldenViewAutoResize
      set pastetoggle=<f12>
  " }

  " leader key mappings {

    let mapleader = ","

    " code folding options
    nmap <leader>f0 :set foldlevel=0<cr>
    nmap <leader>f1 :set foldlevel=1<cr>
    nmap <leader>f2 :set foldlevel=2<cr>
    nmap <leader>f3 :set foldlevel=3<cr>
    nmap <leader>f4 :set foldlevel=4<cr>
    nmap <leader>f5 :set foldlevel=5<cr>
    nmap <leader>f6 :set foldlevel=6<cr>
    nmap <leader>f7 :set foldlevel=7<cr>
    nmap <leader>f8 :set foldlevel=8<cr>
    nmap <leader>f9 :set foldlevel=9<cr>

    nmap <silent> <leader>n :silent :nohlsearch<cr>

    " find merge conflict markers
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<cr>

    " <leader>``: Force quit all
    nnoremap <leader>`` :qa!<cr>

    " <leader>0: Run the visually selected code in python and replace it with the output
    vnoremap <silent> <leader>0 :!python<cr>

    " <leader>q: Quit all, very useful in vimdiff
    nnoremap <leader>q :qa<cr>

    " <leader>e: Fast editing of the .vimrc
    nnoremap <leader>e :e! ~/.vimrc<cr>

    " <leader>?: Quickly open the README.md
    nnoremap <silent> <leader>? :QuickRun -srcfile ~/.vim/README.md -type markdown<cr>

    " <leader>o: only
    "nnoremap <leader>o :only<cr>

    " <leader>p: Copy the full path of the current file to the clipboard
    nnoremap <silent> <leader>p :let @+=expand("%:p")<cr>:echo "Copied current file \ path '".expand("%:p")."' to clipboard"<cr>

    " <leader>s: Spell checking shortcuts
    nnoremap <leader>ss :setlocal spell!<cr>:echo "spell ="&spell<cr>
    nnoremap <leader>sj ]s
    nnoremap <leader>sk [s
    nnoremap <leader>sa zg]s
    nnoremap <leader>sd 1z=
    nnoremap <leader>sf z=

    " <leader>f: Open Quickfix
    nnoremap <silent> <leader>f :botright copen<cr>

    " <leader>cd: Switch to the directory of the open buffer
    nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

    " <leader>m: Maximize current split
    nnoremap <leader>m <c-w>_<c-w><bar>

    " <leader>,: Switch to previous split
    nnoremap <leader>, <c-w>p

    " some helpers to edit mode
    " http://vimcasts.org/e/14
    " map <leader>ew :e %%
    " map <leader>es :sp %%
    " map <leader>ev :vsp %%
    " map <leader>et :tabe %%

    " adjust viewports to the same size
    map <leader>= <c-w>=

    " map <leader>ff to display all lines with keyword under cursor and ask which one to jump to
    nmap <leader>ff [I:let nr = input("Which one: ")<bar>exe "normal " . nr ."[\t"<cr>

    " formatting shortcuts
    " TODO(jrubin) use mqHmwgg=G`wzt`q like `R` (Reindent) map?
    nmap <leader>fef :call Preserve("normal gg=G")<cr>
    nmap <leader>f$ :call StripTrailingWhitespace()<cr>
    vmap <leader>s :sort<cr>

    nnoremap <leader>w :w<cr>

    " shortcuts for windows
    nnoremap <leader>v <c-w>v
    nnoremap <leader>s <c-w>s
    nnoremap <leader>vsa :vert sba<cr>

    " tabularize {
      nmap <leader>a&     :Tabularize /&<cr>
      vmap <leader>a&     :Tabularize /&<cr>
      nmap <leader>a=     :Tabularize /=<cr>
      vmap <leader>a=     :Tabularize /=<cr>
      nmap <leader>a:     :Tabularize /:<cr>
      vmap <leader>a:     :Tabularize /:<cr>
      nmap <leader>a::    :Tabularize /:\zs<cr>
      vmap <leader>a::    :Tabularize /:\zs<cr>
      nmap <leader>a,     :Tabularize /,<cr>
      vmap <leader>a,     :Tabularize /,<cr>
      nmap <leader>a,,    :Tabularize /,\zs<cr>
      vmap <leader>a,,    :Tabularize /,\zs<cr>
      nmap <leader>a<bar> :Tabularize /<bar><cr>
      vmap <leader>a<bar> :Tabularize /<bar><cr>
      nmap <leader>a\|    :Tabularize /\|<cr>
      vmap <leader>a\|    :Tabularize /\|<cr>
      nmap <leader>a#     :Tabularize /#<cr>
      vmap <leader>a#     :Tabularize /#<cr>
    " }

    " json {
      "nmap <leader>jt <esc>:%!python -m json.tool<cr><esc>:set filetype=json<cr>
    " }

    " tagbar {
      " nnoremap <silent> <leader>tt :TagbarToggle<cr>
      nnoremap <silent> <leader>2  :TagbarToggle<cr>
    " }

    " fugitive {
      nnoremap <silent> <leader>gs :Gstatus<cr>
      nnoremap <silent> <leader>gd :Gdiff<cr>
      nnoremap <silent> <leader>gc :Gcommit<cr>
      nnoremap <silent> <leader>gb :Gblame<cr>
      nnoremap <silent> <leader>gl :Glog<cr>
      nnoremap <silent> <leader>gp :Git push<cr>
      nnoremap <silent> <leader>gr :Gremove<cr>
      nnoremap <silent> <leader>gw :Gwrite<cr>
      nnoremap <silent> <leader>ge :Gedit<cr>
      " mnemonic _i_nteractive
      nnoremap <silent> <leader>gi :Git add -p %<cr>
    " }

    " signify {
      nnoremap <silent> <leader>gg :SignifyToggle<cr>
    " }

    " gitv {
      nnoremap <silent> <leader>gv :Gitv<cr>
      nnoremap <silent> <leader>gV :Gitv!<cr>
    " }

    " undotree {
      nnoremap <leader>u :UndotreeToggle<cr>
    " }

    " vim-go {
      autocmd FileType go nmap <leader>d <plug>(go-doc)
      autocmd FileType go nmap <leader>r <plug>(go-run)
      autocmd FileType go nmap <leader>b <plug>(go-build)
      autocmd FileType go nmap <leader>t <plug>(go-test)

      " autocmd FileType go nmap <leader>ds <plug>(go-def-split)
      " autocmd FileType go nmap <leader>dv <plug>(go-def-vertical)
      " autocmd FileType go nmap <leader>dt <plug>(go-def-tab)
    " }

      "nnoremap <leader>nbu  :Unite neobundle/update     -vertical -no-start-insert<cr>
      "nnoremap <leader>nbua :Unite neobundle/update:all -vertical -no-start-insert<cr>

    " vimshell {
      nnoremap <leader>c  :VimShell -split<cr>
      nnoremap <leader>cc :VimShell -split<cr>
      nnoremap <leader>cn :VimShellInteractive node<cr>
      nnoremap <leader>cl :VimShellInteractive lua<cr>
      nnoremap <leader>cr :VimShellInteractive irb<cr>
      nnoremap <leader>cp :VimShellInteractive python<cr>
    " }

    " jsbeautify {
      nnoremap <leader>fjs :call JsBeautify()<cr>
    " }

    " dispatch {
      " nnoremap <leader>tag :Dispatch ctags -R<cr>
    " }

  " vim-codefmt {
    " Format the contents of the buffer using the associated formatter.
    "nnoremap <silent> <leader>hb :FormatCode<cr>

    " Format over the motion that follows. This is a custom operator.
    " For instance, <PREFIX>i  will format all lines inside the enclosing curly
    " braces.
    "nnoremap <silent> <leader>h :set opfunc=codefmt#FormatMap<cr>g@

    ""
    " Format the current line or range using the formatter associated with the
    " current buffer.
    "nnoremap <silent> <leader>h= :FormatLines<cr>

    ""
    " Format the visually selected region using the formatter associated with the
    " current buffer.
    "vnoremap <silent> <leader>h :FormatLines<cr>
  " }

  " }

  " command-line mode key mappings {

    " change working directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " bash like keys for the command line. These resemble personal zsh mappings
    cnoremap <c-a> <home>
    cnoremap <c-e> <end>

    " ctrl-[hl]: Move left/right by word
    cnoremap <c-h> <s-left>
    cnoremap <c-l> <s-right>

    " ctrl-space: Show history TODO(jrubin)
    "cnoremap <c-@> <c-f>

    cnoremap <c-j> <down>
    cnoremap <c-k> <up>
    cnoremap <c-f> <left>
    cnoremap <c-g> <right>

    " ctrl-v: Paste
    cnoremap <c-v> <c-r>"

    " w!!: Writes using sudo
    cnoremap w!! w !sudo tee % >/dev/null

    " some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <c-r>=fnameescape(expand("%:h"))."/"<cr>

  " }

  " normal mode shift key mappings {

    " Q: Closes the window
    nnoremap Q :q<cr>

    " W: Save
    nnoremap W :w<cr>

    " R: Reindent entire file TODO(jrubin) use Preserve()?
    nnoremap R mqHmwgg=G`wzt`q

    " Y: Remove join lines to this, Y looks like a join of two lines into one
    "noremap Y J

    " U: Redos since 'u' undos
    nnoremap U :redo<cr>

    " _ : Quick horizontal splits
    nnoremap _ :sp<cr>

    " | : Quick vertical splits
    nnoremap <bar> :vsp<cr>

    " H: Go to beginning of line.
    "noremap H ^

    " +: expand-region
    vmap + <plug>(expand_region_expand)

    " -: shrink-region
    vmap - <plug>(expand_region_shrink)

    "noremap L g_

    " :: Remap to ,. After all the remapping, ; goes to command mode, . repeats
    " fFtT, : repeats it backward, and , is the leader
    "noremap : ,

    " Z: Bufsurf back
    nnoremap <silent> Z :BufSurfBack<cr>

    " X: Bufsurf forward
    nnoremap <silent> X :BufSurfForward<cr>

    " N: Find next occurrence backward
    nnoremap N Nzzzv

    " +/-: Increment number
    nnoremap + <c-a>
    nnoremap - <c-x>

  " }

  " normal mode ctrl key mappings {

    " ctrl-p: Find files
    nmap <c-p> [unite]f

    " ctrl-n Find files with option to create new
    " nmap <c-n> [unite]n

    " ctrl-o: Find MRU and buffers
    nmap <c-o> [unite]b

    " ctrl-e: Find (e)verything
    "nmap <c-e> [unite]<space>

    " ctrl-d: Command history using Unite
    "nmap <c-d> [unite];

    " ctrl-y: Yanks
    "nmap <c-y> [unite]y

    " ctrl-\: Quick outline
    nmap <silent> <c-\> [unite]o

    " ctrl-sa: Reopen last grep window
    nnoremap <c-s><c-a> :UniteResume -buffer-name=grep<cr>

    " ctrl-ss: (S)earch word under cur(s)or in current directory
    nnoremap <c-s><c-s> :Unite -buffer-name=grep grep:.::<c-r><c-w><cr>

    " ctrl-sd: (S)earch word in current (d)irectory (prompt for word)
    nnoremap <c-s><c-d> :Unite -buffer-name=grep grep:.<cr>

    " ctrl-sf: Quickly (s)earch in (f)ile
    nmap <c-s><c-f> [unite]l

    " ctrl-c: (C)hange (c)urrent directory
    nmap <c-c> [unite]d

    " ctrl-/: A more powerful '/' TODO(jrubin)
    "nmap <c-_> [unite]l

    " ctrl-space: Quick scratch buffer
    nmap <c-space> [unite]j

    " smooth-scroll {
      noremap <silent> <c-y> :call smooth_scroll#up(&scroll, 5, 1)<cr>
      noremap <silent> <c-e> :call smooth_scroll#down(&scroll, 5, 1)<cr>
    " }

    " ctrl-sr: Easier (s)earch and (r)eplace
    nnoremap <c-s><c-r> :%s/<c-r><c-w>//gc<left><left><left>

    " ctrl-sw: Quickly surround word
    nmap <c-s><c-w> ysiw

    " ctrl-z: Cycle through the splits. I don't ever use enough splits to justify
    " wasting 4 very easy to hit keys for them.
    "nnoremap <c-z> <c-w>w

    " ctrl-b: Go (b)ack. Go to previous buffer
    "nnoremap <c-b> <c-^>

    " unimpaired
    "nmap <c-up> [e
    "nmap <c-down> ]e

    " cycle through buffers with ctrl-f/g
    nmap <c-f> :bnext<cr>
    nmap <c-g> :bprev<cr>

  " }

  " insert mode ctrl key mappings {

    " ctrl-h: Move word back. Consistent with zsh
    "noremap <c-h> b
    "inoremap <c-h> <c-o>b

    " ctrl-l: Move word forward. Consistent with zsh
    "noremap <c-l> w
    "inoremap <c-l> <c-o>w

    " ctrl-w: Delete previous word, create undo point
    inoremap <c-w> <c-g>u<c-w>

    " ctrl-e: Go to end of line
    inoremap <c-e> <esc>A

    " ctrl-u: Delete til beginning of line, create undo point
    inoremap <c-u> <c-g>u<c-u>

    " ctrl-a: Go to beginning of line
    inoremap <c-a> <esc>I

    " ctrl-s: Save
    inoremap <c-s> <esc>:w<cr>

    " ctrl-f: Move cursor left
    inoremap <c-f> <Left>

    " ctrl-g: Move cursor right
    inoremap <c-g> <Right>

    " ctrl-j: Move cursor up
    "inoremap <expr> <c-j> pumvisible() ? "\<c-e>\<Down>" : "\<Down>"

    " ctrl-k: Move cursor up
    "inoremap <expr> <c-k> pumvisible() ? "\<c-e>\<Up>" : "\<Up>"

    " ctrl-c: Inserts line below
    inoremap <c-c> <c-o>o

    " ctrl-v: Paste. For some reason, <c-o> is not creating an undo point in the mapping
    inoremap <c-v> <c-g>u<c-o>gP

    " ctrl-/: Undo TODO(jrubin)
    "inoremap <c-_> <c-o>u

  " }

  " visual mode ctrl key mappings {

    " ctrl-c: copy (works with system clipboard due to clipboard setting)
    vnoremap <c-c> y`]

    " ctrl-r: easier search and replace
    vnoremap <c-r> "hy:%s/<c-r>h//gc<left><left><left>

    " ctrl-s: easier substitue
    vnoremap <c-s> :s/\%v//g<left><left><left>

    " ctrl-f: find with multiplecursors TODO(jrubin)
    "vnoremap <c-f> :MultipleCursorsFind<space>

    " unimpaired
    "vmap <c-up> [egv
    "vmap <c-down> ]egv

  " }

  " normal mode key mappings {

    " p: Paste
    "nnoremap p gp

    " d: Delete into the blackhole register to not clobber the last yank
    nnoremap d "_d

    " dd: I use this often to yank a single line, retain its original behavior
    nnoremap dd dd

    " gp to visually select pasted text
    nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

    " ;: Command mode
    "noremap ; :

    " c: Change into the blackhole register to not clobber the last yank
    nnoremap c "_c

    " Up Down Left Right resize splits
    nnoremap <up>    <c-w>+
    nnoremap <down>  <c-w>-
    nnoremap <left>  <c-w><
    nnoremap <right> <c-w>>

    " enter: Highlight cursor location
    nnoremap <silent> <cr> :call CursorPing()<cr>

    " tab: Go to matching element
    nnoremap <tab> %

    " sane regex {
      "nnoremap / /\v
      "nnoremap ? ?\v
      "nnoremap :s/ :s/\v
    " }

    " command-line window {
      nnoremap q: q:i
      nnoremap q/ q/i
      nnoremap q? q?i
    " }

    " folds {
      nnoremap zr zr:echo &foldlevel<cr>
      nnoremap zm zm:echo &foldlevel<cr>
      nnoremap zR zR:echo &foldlevel<cr>
      nnoremap zM zM:echo &foldlevel<cr>
    " }

    " quick buffer open
    nmap gb [unite]s

    " vim-go {
      autocmd FileType go nmap gd <plug>(go-def-split)
    " }

    " unite {
      " map space to the prefix for Unite
      nnoremap [unite] <nop>
      nmap <space> [unite]

      nnoremap <silent> [unite]<space> :Unite -buffer-name=mixed       -toggle -auto-resize          file_rec/async:! buffer file_mru bookmark<cr>
      nnoremap <silent> [unite]r       :Unite -buffer-name=register                                  register<cr>
      nnoremap <silent> [unite]f       :Unite -buffer-name=files       -toggle -auto-resize          file_rec/async:!<cr>
      nnoremap <silent> [unite]n       :Unite -buffer-name=files       -toggle -auto-resize          file_rec/async:! file/new<cr>
      nnoremap <silent> [unite]e       :Unite -buffer-name=recent                                    file_mru<cr>
      nnoremap <silent> [unite]y       :Unite -buffer-name=yank                                      history/yank<cr>
      nnoremap <silent> [unite]l       :Unite -buffer-name=search_file -auto-resize                  line<cr>
      nnoremap <silent> [unite]b       :Unite -buffer-name=buffers     -auto-resize                  buffer<cr>
      nnoremap <silent> [unite]/       :Unite -buffer-name=grep        -no-quit -no-start-insert     grep:.<cr>
      nnoremap <silent> [unite]m       :Unite -buffer-name=mappings    -auto-resize                  mapping<cr>
      nnoremap <silent> [unite];       :Unite -buffer-name=history     -default-action=edit          history/command command<cr>
      nnoremap <silent> [unite]d       :Unite -buffer-name=change-cwd  -default-action=cd            directory_mru directory_rec/async:!<cr>
      nnoremap <silent> [unite]s       :Unite -quick-match buffer<cr>

      nnoremap <silent> [unite]a       :Unite -buffer-name=airline_themes -winheight=10 -auto-preview airline_themes<cr>
      nnoremap <silent> [unite]c       :Unite -buffer-name=colorschemes   -winheight=10 -auto-preview colorscheme<cr>
      nnoremap <silent> [unite]t       :Unite -buffer-name=tag            -auto-resize tag tag/file<cr>
      nnoremap <silent> [unite]o       :Unite -buffer-name=outline        -vertical outline<cr>
      nnoremap <silent> [unite]h       :Unite -buffer-name=help           -auto-resize help<cr>
      nnoremap <silent> [unite]j       :Unite -buffer-name=junk           -auto-resize junkfile junkfile/new<cr>
      nnoremap <silent> [unite]p       :Unite -buffer-name=sessions       session<cr>
    " }

    " easymotion {
    highlight link EasyMotionTarget WarningMsg
    highlight link EasyMotionShade  Comment

    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_startofline = 0
    let g:EasyMotion_move_highlight = 0

    map f <plug>(easymotion-f)
    map t <plug>(easymotion-t)
    map F <plug>(easymotion-F)
    map T <plug>(easymotion-T)
    "map s <Plug>(easymotion-s)
    "map / <Plug>(easymotion-sn)
    "omap / <Plug>(easymotion-tn)
    map <leader>l <Plug>(easymotion-lineforward)
    map <leader>j <plug>(easymotion-j)
    map <leader>k <plug>(easymotion-k)
    map <leader>h <Plug>(easymotion-linebackward)
  " }
" }

  " visual mode key mappings {

    " y: Yank and go to end of selection
    xnoremap y y`]

    " p: Paste in visual mode should not replace the default register with the deleted text
    xnoremap p "_dP

    " d: Delete into the blackhole register to not clobber the last yank. To 'cut', use 'x' instead
    xnoremap d "_d

    " enter: Highlight visual selections
    xnoremap <silent> <cr> y:let @/ = @"<cr>:set hlsearch<cr>

    " backspace: Delete selected and go into insert mode
    xnoremap <bs> c

    " space: QuickRun
    xnoremap <space> :QuickRun<cr>

    " <|>: Reselect visual block after indent
    xnoremap < <gv
    xnoremap > >gv

    " .: repeats the last command on every line
    xnoremap . :normal.<cr>

    " @: repeats macro on every line
    xnoremap @ :normal@

    " tab: Indent
    xmap <tab> >

    " shift-tab: unindent
    xmap <s-tab> <

    " sane regex {
      "vnoremap / /\v
      "vnoremap ? ?\v
    " }

  " }

  " simplify help navigation {
    autocmd FileType help nnoremap <buffer> <cr> <c-]>
    autocmd FileType help nnoremap <buffer> <bs> <c-t>
    autocmd FileType help nnoremap <buffer> o /'\l\{2,\}'<cr>
    autocmd FileType help nnoremap <buffer> O ?'\l\{2,\}'<cr>
    autocmd FileType help nnoremap <buffer> s /\|\zs\S\+\ze\|<cr>
    autocmd FileType help nnoremap <buffer> S ?\|\zs\S\+\ze\|<cr>
  " }

" }

" plugins {

  " textobj sentence {
    augroup textobj_sentence
      autocmd!
      autocmd FileType markdown call textobj#sentence#init()
      autocmd FileType textile call textobj#sentence#init()
      autocmd FileType text call textobj#sentence#init()
    augroup end
  " }

  " textobj quote {
    augroup textobj_quote
      autocmd!
      autocmd FileType markdown call textobj#quote#init()
      autocmd FileType textile call textobj#quote#init()
      autocmd FileType text call textobj#quote#init({"educate": 0})
    augroup end
  " }

  " piv {
    let g:DisableAutoPHPFolding = 1
    let g:PIVAutoClose = 0
    let php_asp_tags = 1
  " }

  " misc {
    let g:NERDShutUp=1
    let b:match_ignorecase = 1
  " }

  " ctags {
    set tags=./tags;/,~/.vimtags
    set showfulltag

    " make tags placed in .git/tags file available in all levels of a repository
    let gitroot = substitute(system("git rev-parse --show-toplevel"), '[\n\r]', "", "g")
    if gitroot != ""
      let &tags = &tags . "," . gitroot . "/.git/tags"
    endif
  " }

  " TODO(jrubin)
  " nerdtree {
    "map <c-e> <plug>NERDTreeTabsToggle<cr>
    "map <leader>e :NERDTreeFind<cr>
    "nmap <leader>nt :NERDTreeFind<cr>

    "let NERDTreeShowBookmarks=1
    "let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
    "let NERDTreeChDirMode=0
    "let NERDTreeQuitOnOpen=0
    "let NERDTreeMouseMode=2
    "let NERDTreeShowHidden=1
    "let NERDTreeKeepTreeInNewTab=1
    "let g:nerdtree_tabs_open_on_gui_startup=0
  " }

  " pymode {
    let g:pymode_lint_checker = "pyflakes"
    let g:pymode_utils_whitespaces = 0
    let g:pymode_options = 0
  " }

  " tagbar {
    " if using go please install the gotags program using the following
    " go install github.com/jstemmer/gotags
    " and make sure gotags is in your path
    let g:tagbar_type_go = {
      \ "ctagstype" : "go",
      \ "kinds"     : [  "p:package", "i:imports:1", "c:constants", "v:variables",
        \ "t:types",  "n:interfaces", "w:fields", "e:embedded", "m:methods",
        \ "r:constructor", "f:functions" ],
      \ "sro" : ".",
      \ "kind2scope" : { "t" : "ctype", "n" : "ntype" },
      \ "scope2kind" : { "ctype" : "t", "ntype" : "n" },
      \ "ctagsbin"  : "gotags",
      \ "ctagsargs" : "-sort -silent"
      \ }
  " }

  " pythonmode {
    " disable if python support not present
    if !has("python")
      let g:pymode = 0
    endif
  " }

  " neocomplete {
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#data_directory=s:get_cache_dir("neocomplete")

    " enable omni completion
    autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby          setlocal omnifunc=rubycomplete#Complete
    autocmd FileType haskell       setlocal omnifunc=necoghc#omnifunc

    " for snippet_complete marker
    "set conceallevel=2 concealcursor=i
  " }

  " neosnippet {
    let g:neosnippet#data_directory=s:get_cache_dir("neosnippet")
    let g:neosnippet#snippets_directory="~/.vim/bundle/vim-snippets/snippets,~/.vim/snippets"
    let g:neosnippet#enable_snipmate_compatibility=1

    " TODO(jrubin) move to mapping section?
    imap <expr> <tab> neosnippet#expandable_or_jumpable() ? "\<plug>(neosnippet_expand_or_jump)" : (pumvisible() ? "\<c-n>" : "\<tab>")
    smap <expr> <tab> neosnippet#expandable_or_jumpable() ? "\<plug>(neosnippet_expand_or_jump)" : "\<tab>"
    imap <expr> <s-tab> pumvisible() ? "\<c-p>" : ""
    smap <expr> <s-tab> pumvisible() ? "\<c-p>" : ""
  " }

  " vim-go {
    let g:go_def_mapping_enabled = 0
    let g:go_snippet_engine = "neosnippet"
    let g:go_fmt_command = "goimports"
    let g:neosnippet#snippets_directory .= "," . globpath(&rtp, "gosnippets/snippets")
    " let g:go_auto_type_info = 1
    " let g:go_dispatch_enabled = 1
  " }

  " undotree {
    " if undotree is opened, it is likely one wants to interact with it
    let g:undotree_SetFocusWhenToggle=1
  " }

  " indent_guides {
    let g:indent_guides_start_level = 1
    let g:indent_guides_guide_size = 1
    " let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_color_change_percent = 3
  " }

  " syntastic {
    let g:syntastic_javascript_jshint_args = ""
    let g:syntastic_typescript_tsc_args = "-t ES5"
    let g:syntastic_typescript_tslint_args = "-c ~/.vim/tslint.config.json"
    let g:syntastic_coffee_coffeelint_args = "--csv -f ~/.vim/coffeelint.config.json"
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_style_error_symbol = '✠'
    let g:syntastic_warning_symbol = '∆'
    let g:syntastic_style_warning_symbol = '≈'
    let g:syntastic_always_populate_loc_list = 1

    " highlight link SyntasticError WarningMsg
    " highlight link SyntasticWarning Question
    highlight link SyntasticErrorSign WarningMsg
    highlight link SyntasticWarningSign Question
  " }

  " colorizer {
    let g:colorizer_auto_filetype="sass,scss,styl,less,css,html"
  " }

  " unite {
    " use the fuzzy matcher for everything
    call unite#filters#matcher_default#use(["matcher_fuzzy"])
    call unite#filters#sorter_default#use(["sorter_rank"])
    call unite#set_profile("files", "context.smartcase", 1)

    let g:unite_data_directory=s:get_cache_dir("unite")
    let g:unite_source_history_yank_enable=1     " enable history yank source

    let g:neomru#file_mru_limit = 1000
    let g:neomru#filename_format = ":~:."
    let g:neomru#time_format = ""

    if executable("ag")
      let g:unite_source_grep_command = "ag"
      let g:unite_source_grep_default_opts = "--noheading --nocolor --nogroup --line-numbers -a -S"
      let g:unite_source_grep_recursive_opt = ""
    endif

    let g:unite_source_rec_max_cache_files = 99999

    call unite#custom#profile("default", "context", {
      \   "start_insert": 1,
      \   "prompt": "» ",
      \   "direction": "botright",
      \   "update_time": 200,
      \   "cursor_line_highlight": "PmenuSel",
      \ })

    " set up some custom ignores
    call unite#custom_source("file_rec,file_rec/async,file_mru,file,buffer,grep",
      \ "ignore_pattern", join([
        \ '\.git/',
        \ '\.hg/',
        \ '\.svn/',
        \ '\.bzr/',
        \ '\.cdv/',
        \ '_darcs/',
        \ 'CVS/',
        \ 'RCS/',
        \ 'SCCS/',
        \ 'tmp/',
        \ '_build/',
        \ 'autom4te\.cache/',
        \ '\.sass-cache/',
        \ 'node_modules/',
        \ 'bower_components/',
        \ 'dist/',
        \ 'Godeps/',
        \ '\~$',
        \ '#.+#$',
        \ '[._].*\.swp$',
        \ 'core\.\d+$',
        \ '\.pyc$',
        \ '\.exe$',
        \ '\.so$',
        \ '\.bak$',
        \ '\.png$',
        \ '\.jpg$',
        \ '\.jpeg$',
        \ '\.gif$',
        \ '\.zip$',
        \ '\.rar$',
        \ '\.tar$',
        \ '\.tar\.gz$',
        \ '\.tar\.bz2$',
        \ ], '\|')
    \ )

    " custom Unite settings
    autocmd FileType unite call s:unite_settings()
    function! s:unite_settings()  " {{{
      " escape to exit unite window
      imap <buffer> <esc> <plug>(unite_exit)

      imap <buffer> <c-j> <plug>(unite_select_next_line)
      imap <buffer> <c-k> <plug>(unite_select_previous_line)

      nmap <buffer> <c-j> <plug>(unite_loop_cursor_down)
      nmap <buffer> <c-k> <plug>(unite_loop_cursor_up)

      nmap <buffer> <tab>   <plug>(unite_loop_cursor_down)
      nmap <buffer> <s-tab> <plug>(unite_loop_cursor_up)
      imap <buffer> <c-a>   <plug>(unite_choose_action)
      imap <buffer> <tab>   <plug>(unite_insert_leave)
      imap <buffer> <c-w>   <plug>(unite_delete_backward_word)
      imap <buffer> <c-u>   <plug>(unite_delete_backward_path)
      imap <buffer> '       <plug>(unite_quick_match_default_action)
      nmap <buffer> '       <plug>(unite_quick_match_default_action)
      nmap <buffer> <c-r>   <plug>(unite_redraw)
      imap <buffer> <c-r>   <plug>(unite_redraw)

      inoremap <buffer> <expr> <c-d> unite#do_action("delete")
      nnoremap <buffer> <expr> <c-d> unite#do_action("delete")

      " open file in new window or tab
      inoremap <silent> <buffer> <expr> <c-s> unite#do_action("split")
      nnoremap <silent> <buffer> <expr> <c-s> unite#do_action("split")
      inoremap <silent> <buffer> <expr> <c-v> unite#do_action("vsplit")
      nnoremap <silent> <buffer> <expr> <c-v> unite#do_action("vsplit")

      let unite = unite#get_current_unite()
      if unite.buffer_name =~# "^search"
        nnoremap <silent> <buffer> <expr> r unite#do_action("replace")
      else
        nnoremap <silent> <buffer> <expr> r unite#do_action("rename")
      endif

      nnoremap <silent> <buffer> <expr> cd unite#do_action("lcd")

      " using Ctrl-\ to trigger outline, so close it using the same keystroke
      if unite.buffer_name =~# '^outline'
        imap <buffer> <c-\> <plug>(unite_exit)
      endif

      " using Ctrl-/ to trigger line, close it using same keystroke TODO(jrubin)
      "if unite.buffer_name =~# '^search_file'
      "  imap <buffer> <c-_> <plug>(unite_exit)
      "endif
    endfunction
    " }}}
   " }

  " junkfile {
    let g:junkfile#directory=s:get_cache_dir("junk")
  " }

  " session {
    let g:unite_source_session_enable_auto_save = 1
    let g:unite_source_session_path = s:get_cache_dir("sessions")
  " }

  " vimshell {
      if has("gui_running")
        let g:vimshell_editor_command="mvim"
      else
        let g:vimshell_editor_command="vim"
      endif

      let g:vimshell_right_prompt="getcwd()"
      let g:vimshell_data_directory= s:get_cache_dir("vimshell")
      let g:vimshell_vimshrc_path=expand("~/.vim/vimshrc")
  " }

  " startify {
    let g:startify_session_dir = s:get_cache_dir("sessions")
    let g:startify_change_to_vcs_root = 1
    let g:startify_show_sessions = 1
    autocmd FileType startify setlocal nospell
  " }

  " vimfiler {
    map <c-n> :VimFilerExplorer<cr>

    autocmd FileType vimfiler nmap <buffer> <c-l> :TmuxNavigateRight<cr>
    autocmd FileType vimfiler nmap <buffer> <c-j> :TmuxNavigateDown<cr>
    autocmd FileType vimfiler nmap <buffer> <c-r> <Plug>(vimfiler_redraw_screen)
    autocmd FileType vimfiler nmap <buffer> <c-h> <Plug>(vimfiler_switch_to_history_directory)

    " function! g:MyOpenExplorerCommand()  " {{{
    "   return printf(":\<c-u>VimFilerBufferDir -buffer-name=%s -split -auto-cd -toggle -no-quit -winwidth=%s\<cr>",
    "     \ g:my_vimfiler_explorer_name,
    "     \ g:my_vimfiler_winwidth)
    " endfunction
    " " }}}

    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_tree_leaf_icon = ' '
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_tree_closed_icon = '▸'
    let g:vimfiler_marked_file_icon = '✓'
    let g:my_vimfiler_explorer_name = 'explorer'
    let g:my_vimfiler_winwidth = 60
    let g:vimfiler_safe_mode_by_default = 0
    let g:vimfiler_data_directory = s:get_cache_dir("vimfiler")
    let g:vimfiler_quick_look_command = "qlmanage -p"

    autocmd FileType unite call s:vimfiler_settings()
    function! s:vimfiler_settings()  " {{{
      nmap <buffer><expr><cr> vimfiler#smart_cursor_map("\<plug>(vimfiler_expand_tree)", "e")
    endfunction
    " }}}
  " }

  " quickrun {
    let g:quickrun_config = {}
    let g:quickrun_config.markdown = {
      \ "outputter": "null",
      \ "command":   "open",
      \ "cmdopt":    "-a",
      \ "args":      shellescape("Marked 2"),
      \ "exec":      "%c %o %a %s",
      \ }
  " }

  " expand region {
    let g:expand_region_use_select_mode = 0

    " extend the global dictionary
    call expand_region#custom_text_objects({
      \ 'a]'  :1,
      \ "ab"  :1,
      \ "aB"  :1,
      \ "ii"  :0,
      \ "ai"  :0,
      \ })

    " customize it further for html
    call expand_region#custom_text_objects("html", {
      \ "it" :1,
      \ })
  " }

  " python {
    let g:pymode_rope=0
    let g:jedi#popup_on_dot=0
  " }

  " ruby {
    let g:rubycomplete_buffer_loading = 1
  " }

  " fugitive {
    " delete fugitive buffers when they are left
    autocmd BufReadPost fugitive://* set bufhidden=delete
  " }

  " sneak {
    let g:sneak#streak = 1
  " }

  " gist {
    let g:gist_post_private = 1
    let g:gist_show_privates = 1
  " }

  " goldenview {
    let g:goldenview__enable_default_mapping = 0
  " }

  " signify {
    let g:signify_disable_by_default = 1
  " }

  " auto-pairs {
    let g:AutoPairsCenterLine = 0
  " }

  " autoformat {
    function! RunAutoFormat() "{{{
      if exists('b:runAutoFormat')
        :Autoformat
      endif
    endfunction "}}}

    autocmd BufWritePre * call RunAutoFormat()
    autocmd FileType javascript,typescript,python,json,ruby,css,scss,cs,cpp,c,objc,java let b:runAutoFormat = 1
  " }

 " hardmode {
   "autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
   nnoremap <leader>o <Esc>:call ToggleHardMode()<CR>
 " }
" }

" gui {
  if has("gui_running")
    if has("gui_macvim")
      set transparency=1
      set guifont=Inconsolata\ for\ Powerline:h12
    elseif has("gui_gtk")
      set guifont=Inconsolata\ for\ Powerline\ Medium\ 10
    endif
  else
    if $TERM_PROGRAM == "iTerm.app"
      " different cursors for insert vs normal mode
      if exists("$TMUX")
        let &t_SI = "\<Esc>[3 q"
        let &t_EI = "\<Esc>[0 q"
      else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
      endif
    endif
  endif
" }

" tmux paste {
  let &t_SI .= s:wrap_for_tmux("\<Esc>[?2004h")
  let &t_EI .= s:wrap_for_tmux("\<Esc>[?2004l")

  inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" }
